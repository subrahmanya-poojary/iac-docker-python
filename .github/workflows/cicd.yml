name: Terraform CICD Workflow

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

jobs:
  iac-pipeline:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_ENV: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Run Terraform Format
        run: |
          cd ./iac
          terraform fmt --recursive 
      - name: Initialize Terraform Directory
        run: | 
          cd ./iac
          terraform init -backend-config='backend.${{ env.TF_ENV }}.conf'
      - name: Run Terraform Validate
        run: |
          cd ./iac
          terraform validate 
      - name: Run Terraform Plan
        run: |
          cd ./iac
          terraform plan -out=tfplan -var-file=terraform.${{ env.TF_ENV }}.tfvars
  apply_pipeline:
    needs: iac-pipeline
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      issues: write  # Ensure write permissions for issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Approval Issue
        id: create_issue
        uses: actions/github-script@v6
        with:
          script: |
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "Approval required: Terraform Apply",
              body: `
              A Terraform plan has been generated and is ready for review.
              **Steps to Approve**:
              1. Review the Terraform plan.
              2. Add a comment to this issue with **approve** to proceed.
              **Note**: This will automatically trigger the apply pipeline.`,
              labels: ["terraform-approval"],
            });
            core.setOutput("issue_number", issue.number);
      - name: Wait for Approval
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.create_issue.outputs.issue_number }};
            const timeout = 3600 * 1000; // 1 hour timeout
            const start = Date.now();
            let approved = false;
            while (Date.now() - start < timeout) {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });
              if (comments.some(comment => comment.body.toLowerCase().trim() === 'approve')) {
                approved = true;
                break;
              }
              await new Promise(resolve => setTimeout(resolve, 10000)); // Check every 10 seconds
            }
            if (!approved) {
              throw new Error("Approval not received within the timeout period.");
            }
      - name: Terraform Apply
        run: |
          cd ./iac
          terraform apply tfplan